0.	А) Ключевое слово static при объявлении переменной внутри функции означает, что после инициализации такой переменной, она останется в памяти до конца выполнения программы. 
Б) При определении поля класса с использованием слова static, это поле будет иметь одно и то же значение для всех экземпляров данного класса. Статические переменные будут являться общими для всех объектов данного класса
В) При создании метода класса с использованием слова static, функция объявленная таким образом не будет иметь параметра this, не может быть виртуальной и не может иметь может иметь модификатор const.
Обращение к статистическим методам и полям класса происходит следующим образом: Class_name::member_name
Г) При объявлении глобальных переменных с использованием слова static, эти переменные будут иметь внутреннее связывание, т.е. например при описании ее в многофайловой программе, область видимости этой переменной будет ограничена только тем файлом, в котором она объявлена
1.	Наследование классов – принцип создания новых классов на основе существующих. Наследование позволяет создавать новые классы (наследники) с уже имеющимися методами и элементами базового класса. Объекты класса-наследника могут использовать все созданное в базовом классе при этом могут иметь новые, не существующие в базовом классе методы и поля или измененные, по сравнению с базовым. Цель использования наследования – переиспользование кода. Классу-наследнику не доступны private члены базового и доступны public. Для доступа класса-наследника к части скрытых полей базового используется модификатор доступа protected.
Создание класса-наследника происходит по форме:
Class class_name : access_modifier basic_class_name
2.	При public наследовании модификаторы доступа членов класса-наследника будут в точности совпадать с модификаторами доступа исходного класса, т.е. все public члены базового класса остаются public членами класса-наследника и аналогично с private и protected
3.	Указатель или ссылка на базовый класс может указывать на объект класса-наследника этого базового класса. Используя указатель, можно получить доступ ко всем членам класса-наследника, наследованным от базового, однако нельзя получить доступ к специфическим членам класса-наследника до соответствующего приведения типов. Это происходит, потому что указателю известно только о членах базового класса, но не о членах классов-наследников. При этом указатель типа указателя на класс-наследник не может использоваться для доступа к объектам базового класса
4.	Виртуальные функции – это функции, связывание вызова которых с их определением происходит во время выполнения программы, на основе типа вызываемого объекта. Для объявления используется ключевое слово virtual. Виртуальная функция объявляется в базовом классе и переопределяется в классах-наследниках. Виртуальная функция вызывается через указатель или ссылку на базовый класс.

0. Шаблоны классов - инструкции, согласно которым создаются экземпляры классов, параметры и типы которых неопределены на момент написания шаблона. Шаблоны позволяют создать универсальные конструкции, не зависящие от типов даных, и затем переиспользовать их, когда эти типы данных будут определены. Фактически, объявление шаблона класса есть только описанием. Создание реального класса с заданным типом данных осуществляется компилятором в момент компиляции, когда объявляется объект класса.

1. Аргументами шаблона класса могут быль типы данных, нетипизированные параметры и шаблоны. Использование чисел с плавающей точкой и объектов с типом класса в качестве параметров шаблона не допускается. Шаблоны классов и функций могут иметь аргументы по умолчанию. Если шаблон содержит аргумент по умолчанию, можно оставить его не указанным, при его использовании. При наличии нескольких аргументов шаблона все аргументы после первого аргумента по умолчанию должны иметь аргументы по умолчанию.

2. Шаблоны классов можно использовать рекурсивно, например создать двумерный массив как одномерный массив, содержащий одномерные массивы:
Template<Template<int, int n>, int m>
class Array
{...};
Это эквивалентно объявлению двумерного массива mxn, содержащего элементы типа int, тк фактически определяется массив из m элементов, являющихся одномерными массивами длины n, содержащими элементы типа int

3. Количество аргументов шаблонов не ограничено ничем, кроме здравого смысла

4. Задание значений параметров шаблонов по умолчанию возможно. Использование нетипизированных параметров по умолчанию в шаблонах классов аналогично использованию таковых в шаблонах функций. Однако, также возможно задание типизированных параметров шаблона класса по умолчанию:
template<class T = int>
class Myclass { };

5. Специализация шаблона используется, когда описанный в шаблоне алгоритм действий, по каким-либо причинам не подходит для конкретного типа данных. В этом случае для этого конкретного типа создается отдельная специализация шаблона:
template<Typename T0, Typename T1>//Шаблон
class Myclass{}

template <> class Myclass <char, int> {}//специализация для типов char и int

Возможна также неполная специализация шаблона, в таком случае какая-то часть параметризованных типов данных не определяется какими-то конкретными, а так и остается параметризованной

6. Оба объекта возможно передать в фунцию show, если она работает с этим типом данных

7. В функцию можно передать только объект iMc100, тк функция show имеет аргумент класса этого объекта, а объект iMc1000 хоть и "порожден" тем же шаблоном класса, но относится к иному классу, нежели объект iMc100 и аргумент функции show
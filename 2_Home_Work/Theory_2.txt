    1. Типы памяти С:
А) Автоматическая
Объект выделяется на автоматической памяти по умолчанию. Объект существует, пока существует блок, в котором объявлен объект, и виден только в этом блоке. Размер объекта неизменен. Объект размещается на стеке
Б) Статическая
Объект выделяется на статической памяти, если он имеет спецификатор static. Объект существует все время выполнения программы и инициализируется один раз до запуска программы. Объект имеет неизменный размер, размещается в отдельном сегменте памяти
В) Динамическая
	Память под объект выделяется при помощи malloc. Объект существует от вызова malloc до вызова free и имеет изменяемый размер. Объект размещается на куче.
    2. Область видимости определяется местом объявления идентификатора:
А) Идентификатор, объявленный вне определения функции, типа, процедуры, условия (условно “вне {}”) является глобальным (видимым везде)
Б) Идентификатор, объявленный при определении функции, является локальным в данной функции (виден только в этой функции)
В) Идентификатор, объявленный при определении тип данных, является локальным в данном типе 
Г) Идентификатор, объявленный внутри замкнутой части программы (тело структуры условия, цикла), является локальным в данной части программы
    3. Остаются верны пункты А)-Г) номера 1
Д) Идентификатор, объявленный вне процедур или классов, относится к модулю, пакету или пространству имён, внутри которого находится его объявление
Е) Идентификатор, объявленный внутри класса, по умолчанию относится к приватной области видимости. Прочие области видимости устанавливаются с помощью описания (public, protected)
Namespace – ключевое слово, задающее пространство имен, которое определяет область кода, в которой гарантируется уникальность идентификаторов для избежания ситуаций конфликта имен при совместном использовании двух независимых фрагментов кода. Все объекты, объявленные внутри конкретного пространства имен, принадлежат только этому пространству имен. Доступ к пространству осуществляется при помощи оператора :: с предшествующим ему названием требуемого пространства имен. Возможно также использование оператора using с последующими словом namespace и названием пространства имен с той же целью
    4. Public – модификатор доступа класса, дающий доступ всем структурам, видящим определения класса
Private – модификатор доступа класса, дающий доступ только чтенам самого класса и “друзьям” класса
    5. Конструктор – метод класса, инициализирующий элементы данного класса некоторыми значениями. Конструктор всегда относится к public. При его объявлении возвращаемый тип данных не указывается. Имена класса и конструктора совпадают. Возможно создание нескольких конструкторов в одном классе, различаемых по передаваемым параметрам. Конструктор по умолчанию не имеет передаваемых параметров.
Деструктор – метод класса, используемый для уничтожения элементов класса. Не имеет типа данных возвращаемого значения и каких-либо параметров. Имя деструктора есть имя класса с предшествующей тильдой. Для одного класса возможен только один деструктор.
    6. New – оператор динамического выделения памяти языка С++
Delete – оператор освобождения динамически выделенной памяти
Форма записи в программе:
	Variable/pointer = new type_of_variable;
	Delete variable/pointer;
    7. This – неизменяемый указатель на адрес объекта класса. Является скрытым первым параметром всех методов класса, кроме статических. Указывает на объект, для которого вызывается функция-член
    8. 	Std::cout – объект библиотеки iostream, используемый для вывода текста в стандартный поток вывода
		Std::cin – объект библиотеки iostream, используемый для получения данных через стандартный поток ввода для их использования
Форма записи в программе:
	Std::cout << поток_вывода 
	Std::cin >> поток_ввода


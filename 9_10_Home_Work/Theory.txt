0)	Итератор – интерфейс, позволяющий перемещаться по элементам некоторой последовательности. Типы итераторов: а) входной – итератор, предназначенный для чтения, но не изменения. Является однонаправленным, причем последовательность считываемых эл-тов не гарантированно упорядочена. Определена операция ++ б) выходной – итератор, используемый для перезаписи, т.е. возможно как чтение, так и запись. Является однонаправленным, определена операция ++ в) Однонаправленный – позволяет как читать так и записывать, но гарантирует одинаковую упорядоченность последовательности чтения г) двунаправленный – в дополнение к предыдущему имеет операцию --, которая в совокупности с операцией ++ позволяет перемещаться в обе стороны. Д) Итератор с произвольным доступом – способны считывать и записывать значения с произвольным доступом, доступны арифметические действия и операции сравнения
1)	STL – набор согласованных обобщенных алгоритмов контейнеров, средств доступа к их содержимому и различных вспомогательных функций. Компоненты STL: Контейнеры – хранение набора объектов в памяти, Итераторы – обеспечение доступа к содержимому контейнеров, Алгоритм – определение вычислительной процедуры, Адаптер – адаптация компонентов для обеспечения различных интерфейсов, Функциональный объект – сокрытие функции в объекте для использования другими компонентами
2)	Классы STL:
Array – хранение элементов в виде статического массива
Stack – хранение элементов в виде стека по принципу LIFO
List – хранение элементов в виде двунаправленного списка
Queue – хранение элементов в виде очереди по принципу FIFO
Dequeue – хранение элементов по принципу двусторонней очереди
Vector – динамический массив с автоматическим изменением длины массива при добавлении и удалении элементов
Map – упорядоченный массив пар элементов, состоящий из ключа и самого элемента, отождествляемого с этим ключом
Multimap – map с возможностью хранить одинаковые ключи
Multiset – множество элементов с возможными повторами
Priority queue – очередь с приоритетом
3)	Библиотека <algorithm> - библиотека внутри стандартной библиотеки, которая содержит набор функций для выполнения алгоритмических операций над контейнерами
Типы алгоритмов:
a)Не изменяющие последовательные операции:
Find (first, last, value) – возвращает итератор, указывающий на первый элемент, равный значению value
For_each(first, last, function) – применяет указанную функцию для всех объектов
Search(first1, last1, first2, last2) – проверяет содержится ли второй диапазон внутри первого и возвращает начало совпадения или last1 если такового нет
Б)Изменяющие последовательные операции
Reverse(first, last) – обращает последовательность объектов из диапазона
Replace(first, last, old, new) – заменяет все объекты равные old на объекты равные new
Transform (first1, last1, first2, operator) – превращает объекты из диапазона 1 в новые объекты диапазона 2, применяя оператор
В) Операции сортировки
Sort(first, last) – сортирует объекты в диапазоне
Stable_sort(first, last) – отличается  от обычной сортировки тем что не меняет позиции элементов если их значения одинаковы
Г)Операции поиска
Binary_search(first, last, value) – возвращает true если значение value входит в интервал
Д)Операции отношений
Max_element(first, last) – Возвращает итератор, указывающий на наибольший объект в диапазоне
Min_element(first, last) – Возвращает итератор указывающий на наименьший объект в диапазоне
